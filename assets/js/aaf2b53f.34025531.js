"use strict";(self.webpackChunkrunnerty=self.webpackChunkrunnerty||[]).push([[3541],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2930:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(4137)),o=["components"],l={id:"process",title:"Processes",sidebar_label:"Processes"},s=void 0,p={unversionedId:"process",id:"version-3.3.0/process",title:"Processes",description:"In Runnerty, processes are calls to the executors. The executors are plugins which encapsulate functionalities. Know more about executors here.",source:"@site/versioned_docs/version-3.3.0/process.md",sourceDirName:".",slug:"/process",permalink:"/docs/process",editUrl:"#/versioned_docs/version-3.3.0/process.md",tags:[],version:"3.3.0",frontMatter:{id:"process",title:"Processes",sidebar_label:"Processes"}},u=[{value:"Identification",id:"identification",children:[],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Exec",id:"exec",children:[],level:2},{value:"Retries",id:"retries",children:[],level:2},{value:"Notifications",id:"notifications",children:[],level:2},{value:"Output",id:"output",children:[],level:2},{value:"Output Share (output_share)",id:"output-share-output_share",children:[],level:2},{value:"Output Iterable (output_iterable)",id:"output-iterable-output_iterable",children:[],level:2},{value:"Output Filter (output_filter)",id:"output-filter-output_filter",children:[],level:2},{value:"Output Order (output_order)",id:"output-order-output_order",children:[],level:2},{value:"TimeOut (timeout)",id:"timeout-timeout",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In Runnerty, processes are calls to the executors. The executors are plugins which encapsulate functionalities. Know more about executors ",(0,r.kt)("a",{parentName:"p",href:"/docs/executors"},"here"),"."),(0,r.kt)("p",null,"There is a bunch of executors with different functionalities, have a look at the official ",(0,r.kt)("a",{parentName:"p",href:"plugins.md"},"here"),"."),(0,r.kt)("p",null,"One of the most important executors could be the shell executor ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/runnerty/executor-shell"},"@runnerty/executor-shell"),". As it is the Command-Line Interface, with this plugin is possible to execute existing processes that you may already have."),(0,r.kt)("h2",{id:"identification"},"Identification"),(0,r.kt)("p",null,"Each process has two identification fields: ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"id")," is the unique identification string of the process.\n",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is a description of the process"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{4-5}","{4-5}":!0},'{\n  "processes": [\n    {\n      "id": "PROCESS_ONE",\n      "name": "First process of the chain"\n    }\n  ]\n}\n')),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("p",null,"With Runnerty is possible to establish dependencies betwwen processes. Runnerty provides a powerful feature for this task."),(0,r.kt)("p",null,"In the example below we can see how ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_ONE")," has a dependcien with ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_TWO"),". This way, ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_TWO")," will only start when ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_ONE")," had finished."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6}","{6}":!0},'{\n  "processes": [\n    {\n      "id": "PROCESS_TWO",\n      "name": "Second process of the chain",\n      "depends_process": ["PROCESS_ONE"]\n      //...\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Not only it is possible to set up dependencies to other processes end states. You can also use operators to evaluate values, add complex conditions using operators and multiple expressions."),(0,r.kt)("p",null,"It is highly recommended to have a look at ",(0,r.kt)("strong",{parentName:"p"},"dependencies")," documentation ",(0,r.kt)("a",{parentName:"p",href:"dependencies.md"},"here"),"."),(0,r.kt)("h2",{id:"exec"},"Exec"),(0,r.kt)("p",null,"In the exec property are the fields that identify the executor that is going to be used and the params needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{6-10}","{6-10}":!0},'{\n  "processes": [\n    {\n      "id": "PROCESS_ONE",\n      "name": "First process of the chain",\n      "exec": {\n        "id": "shell_default",\n        "command": "echo \'Hello world\'"\n        //...\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"In this example we are using our shell_default executor, the configuration for this executor should be in our config.json file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "executors": [\n    {\n      "id": "shell_default",\n      "type": "@runnerty-executor-shell"\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field we are indicating the executor that we are going tov use. The rest of the fields are params for the executor. Know more about the executors and their usage in ",(0,r.kt)("a",{parentName:"p",href:"/docs/executors"},"here"),". You can also chekc the ",(0,r.kt)("a",{parentName:"p",href:"config.md"},"config")," documentation to know how to configure them."),(0,r.kt)("h2",{id:"retries"},"Retries"),(0,r.kt)("p",null,"With runnerty we can configure a process to retry in case of error.\nWe only have to indicate the number of ",(0,r.kt)("inlineCode",{parentName:"p"},"retries")," for the process and optionally the delay (",(0,r.kt)("inlineCode",{parentName:"p"},"retry_delay"),") between retries."),(0,r.kt)("p",null,"It is also possible to avoid the notifications ",(0,r.kt)("inlineCode",{parentName:"p"},"on_fail")," of the failed executions previous to the last attempt.\nWe can indicate that only the last fail ",(0,r.kt)("inlineCode",{parentName:"p"},"notificate_only_last_fail")," is notified."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{9-11}","{9-11}":!0},'{\n  "processes": [\n    {\n      "id": "PROCESS_SAMPLE",\n      "name": "Sample process with retries",\n      "exec": {\n        "id": "shell_default",\n        "command": "node myprocess.js",\n        "retries": 2,\n        "retry_delay": "1s",\n        "notificate_only_last_fail": true\n        //...\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"In this example after the first execution failure, it will be retry up to 2 times with 1 second delays.\nAnd the error will only be reported in case the last attempt fails."),(0,r.kt)("p",null,"We also have the possibility to implement specific notifications for retries in the ",(0,r.kt)("inlineCode",{parentName:"p"},"on_retry")," event."),(0,r.kt)("p",null,"The number of retries for a process can be obtained from ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_RETRIES_COUNT")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@GETVALUES")," function, to know more about values ",(0,r.kt)("a",{parentName:"p",href:"values.md"},"here"),"."),(0,r.kt)("h2",{id:"notifications"},"Notifications"),(0,r.kt)("p",null,"Runnerty also provides a notification system for your workflows. With the notifications property you can have access to the different states of the process: ",(0,r.kt)("inlineCode",{parentName:"p"},"on_start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on_fail"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on_retry"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"on_end")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"on_queue")," and use them to send notifications."),(0,r.kt)("p",null,"For this task, Runnerty uses ",(0,r.kt)("strong",{parentName:"p"},"notifiers"),", know more about them ",(0,r.kt)("a",{parentName:"p",href:"/docs/notifiers"},"here"),"."),(0,r.kt)("p",null,"This is an example of usage of notifications in a process. In this case, we are using the Telegram notifier to notify the different states of the process to a Telegram chat:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "PROCESS_ONE",\n  "name": "First process of the chain",\n  "exec": {\n    "id": "shell_default",\n    "command": "echo \'Hello world\'"\n  },\n  "notifications": {\n    "on_start": [\n      {\n        "id": "telegram_default",\n        "message": "THE PROCESS @GV(PROCESS_ID) HAS STARTED"\n      }\n    ],\n    "on_fail": [\n      {\n        "id": "telegram_default",\n        "message": "THE PROCESS @GV(PROCESS_ID) HAS FAILED"\n      }\n    ],\n    "on_end": [\n      {\n        "id": "telegram_default",\n        "message": "THE PROCESS @GV(PROCESS_ID) HAS FINISHED"\n      }\n    ],\n    "on_queue": [\n      {\n        "id": "telegram_default",\n        "message": "THE PROCESS @GV(PROCESS_ID) HAS QUEUE"\n      }\n    ],\n    "on_timeout": [\n      {\n        "id": "telegram_default",\n        "message": "THE PROCESS @GV(PROCESS_ID) HAS TIMEOUT"\n      }\n    ]\n  }\n}\n')),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In the example it is used the value ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_ID"),", this value will have the id of the process. ",(0,r.kt)("a",{parentName:"p",href:"values"},"Know more about"),"."))),(0,r.kt)("p",null,"There is an official list of the available notifiers ",(0,r.kt)("a",{parentName:"p",href:"plugins.md"},"here"),"."),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("p",null,"Another property of ther processes is that we can redirect the output of a process to a file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{8-15}","{8-15}":!0},'{\n  "id": "PROCESS_ONE",\n  "name": "First process of the chain",\n  "exec": {\n    "id": "shell_default",\n    "command": "echo \'Hello world\'"\n  },\n  "output": [\n    {\n      "file_name": "/var/log/runnerty/general.log",\n      "write": ["EXECUTION *@GV(PROCESS_ID)* @GETDATE(DD-MM-YY HH:mm:ss)"],\n      "concat": true,\n      "maxsize": "1mb"\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Runnerty provides some options to manage logs. Using the property ",(0,r.kt)("inlineCode",{parentName:"p"},"concat")," we can indicate Runnerty if we want to concatente the output or overwrite it."),(0,r.kt)("p",null,"With the maxsize option we indicate Runnerty the maximun size that the log's file could have. Runnerty will automatically delete the firt lines of the file when it is full and needs to continue writting."),(0,r.kt)("h2",{id:"output-share-output_share"},"Output Share (output_share)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"output_share")," property it is used to define values from the output of a process. Theses values area availables for the rest of the procesess of the chain."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{10-16}","{10-16}":!0},'{\n  "processes": [\n    {\n      "id": "GET-USER-EMAIL",\n      "name": "It get an user email",\n      "exec": {\n        "id": "mysql_default",\n        "command": "SELECT email FROM USERS WHERE ID = 1"\n      },\n      "output_share": [\n        {\n          "key": "USER",\n          "name": "EMAIL",\n          "value": "@GV(PROCESS_EXEC_MSG_OUTPUT)"\n        }\n      ]\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"In this example we are getting the email of an user from the database using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@runnerty/executor_mysql")," and assigning it to a value. This way we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@GV(USER_EMAIL)")," value anywhere of the chain."),(0,r.kt)("p",null,"Note that in this example we are are using the value ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_EXEC_MSG_OUTPUT"),". This is a value that contains the return of the process. Have a look at the ",(0,r.kt)("a",{parentName:"p",href:"values.md"},"values")," documentation."),(0,r.kt)("h2",{id:"output-iterable-output_iterable"},"Output Iterable (output_iterable)"),(0,r.kt)("p",null,"The`output_iterable property it's used to iterate a chain depending of the output of a process. An iterable chain is a chain that is going to be executed for each object of the array returned by a process. For example, if we have a process which returns an objects array we can execute an iterable chain for each object of the array."),(0,r.kt)("p",null,"You can have a look at the ",(0,r.kt)("a",{parentName:"p",href:"chain.md"},"chains")," documentation to see an usage example."),(0,r.kt)("h2",{id:"output-filter-output_filter"},"Output Filter (output_filter)"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"output_filter")," property allows us to filter the results that the executor has returned in ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_EXEC_DATA_OUTPUT"),". This can be useful if we want to work with only some of the records of the returned dataset, both for ",(0,r.kt)("inlineCode",{parentName:"p"},"ouput_iterable")," (iterable chains) and for ",(0,r.kt)("inlineCode",{parentName:"p"},"output_share"),"."),(0,r.kt)("p",null,"For example for a given dataset with the following records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "TYPE": "A",\n    "LEVEL": 1\n  },\n  {\n    "TYPE": "A",\n    "LEVEL": 2\n  },\n  {\n    "TYPE": "B",\n    "LEVEL": 1\n  },\n  {\n    "TYPE": "B",\n    "LEVEL": 3\n  }\n]\n')),(0,r.kt)("p",null,"We could apply a filter that would return only those with ",(0,r.kt)("inlineCode",{parentName:"p"},"LEVEL")," greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TYPE")," equals ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "processes": [\n    {\n      "id": "GET-DATA",\n      //"...":"...",\n      "output_filter": {\n        "$and": [{ "LEVEL": { "$gt": 1 } }, { "TYPE": { "$eq": "A" } }]\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"The operation is similar to that of the ",(0,r.kt)("a",{parentName:"p",href:"dependencies.md#evaluators"},"complex dependency evaluators")," between processes."),(0,r.kt)("p",null,"The structure of the evaluator is ",(0,r.kt)("inlineCode",{parentName:"p"},'{"value 1": {"$condition": "value 2"}}'),".\nOf course in these values you can make use of all the functions.\nThese are the evaluators you can use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$eq    - equal. Examples: {"VAL_1": {"$eq": "VAL_2"}}, {"@GV(VAR1)": {"$eq": "@GV(VAR2)"}}\n$ne    - not equal. Example: {"@UPPER(str_sample)": {"$ne": "@GV(VAR2)"}}\n$match - supports regular expressions. Example: {"aBc":{"$match":"/ABC/i"}}\n$gt    - greater than. Example: {"@LENGTH(str_sample)": {"$gt": "@GV(VAR_INT_1)"}}\n$gte   - greater than equal. Example: {2:{"$gte":1}\n$lt    - less than\n$lte   - less than equal\n$in    - determine if a specified value matches any value in a list. Example: {"VAL_1": {"$in": ["A","B"]}}\n$nin   - determine if a specified value does not match any value in a list. Example: {"VAL_1": {"$in": ["A","B"]}}\n')),(0,r.kt)("h2",{id:"output-order-output_order"},"Output Order (output_order)"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"output_order")," property allows us to ordert the results that the executor has returned in ",(0,r.kt)("inlineCode",{parentName:"p"},"PROCESS_EXEC_DATA_OUTPUT"),". This can be useful if we want to work on an ordered dataset both for ",(0,r.kt)("inlineCode",{parentName:"p"},"ouput_iterable")," (iterable chains) and for ",(0,r.kt)("inlineCode",{parentName:"p"},"output_share"),"."),(0,r.kt)("p",null,"For example for a given dataset with the following records:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "TYPE": "A",\n    "LEVEL": 1\n  },\n  {\n    "TYPE": "A",\n    "LEVEL": 2\n  },\n  {\n    "TYPE": "B",\n    "LEVEL": 1\n  },\n  {\n    "TYPE": "B",\n    "LEVEL": 3\n  }\n]\n')),(0,r.kt)("p",null,"We could apply its ordering like in this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "processes": [\n    {\n      "id": "GET-DATA",\n      //"...":"...",\n      "output_order": ["TYPE", "LEVEL desc"]\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"This would order the output like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "TYPE": "A",\n    "LEVEL": 2\n  },\n  {\n    "TYPE": "A",\n    "LEVEL": 2\n  }, \n  {\n    "TYPE": "B",\n    "LEVEL": 3\n  },\n  {\n    "TYPE": "B",\n    "LEVEL": 1\n  }\n]\n')),(0,r.kt)("h2",{id:"timeout-timeout"},"TimeOut (timeout)"),(0,r.kt)("p",null,"The timeout property it's used to set the maximun time to wait process ends."),(0,r.kt)("p",null,"It is possible to establish two different actions, end or error. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," action is indicated, the process will end with a failure and if ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," is indicated the process will end without failure. In both cases the function ",(0,r.kt)("inlineCode",{parentName:"p"},"kill")," of the executor in question will be called."),(0,r.kt)("p",null,"In addition to the action must indicate the mandatory property ",(0,r.kt)("inlineCode",{parentName:"p"},"delay")," indicating the maximum timeout in milliseconds."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"{5-8}","{5-8}":!0},'{\n  "processes": [\n    {\n      //...\n      "timeout": {\n        "action": "error",\n        "delay": "3s"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Delay property understands the following strings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x milliseconds")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x millisecond")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x msecs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x msec")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x ms")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x seconds")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x second")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x secs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x sec")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x s")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x minutes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x minute")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x mins")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x min")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x m")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x hours")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x hour")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x hrs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x hr")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x h")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x days")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x day")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x d")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x weeks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x week")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x wks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x wk")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x w")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x years")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x year")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x yrs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x yr")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x y"))),(0,r.kt)("p",null,"The space after the number is optional so you can also write ",(0,r.kt)("inlineCode",{parentName:"p"},"1ms")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"1 ms"),". In addition to that it also accepts numbers and strings which only includes numbers and we assume that these are always in milliseconds."),(0,r.kt)("p",null,"From: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/unshiftio/millisecond"},"Millisecond module")))}d.isMDXComponent=!0}}]);